/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Create a dummy node that points to the head of the list
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode first = dummy;
        ListNode second = dummy;
        
        // Move first to the n+1 position
        for (int i = 1; i <= n + 1; i++) {
            first = first.next;
        }
        
        // Move first to the end, maintaining the gap
        while (first != null) {
            first = first.next;
            second = second.next;
        }
        
        // Skip the desired node
        second.next = second.next.next;
        
        // Return the head of the modified list
        return dummy.next;
    }
    public ListNode removeNthFromEnd2(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode current = head;
        int length = 0;
        while (current != null) {
            length++;
            current = current.next;
        }

        length -= n;
        current = dummy;

        for (int i = 0; i < length; i++) {
            current = current.next;
        }

        current.next = current.next.next;
        return dummy.next;
    }
}
